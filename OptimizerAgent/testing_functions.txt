def run_code(code: str) -> Tuple[str, float, float]:
    """Run code by writing it to a temporary file and executing it using subprocess, tracking memory usage."""
    import tempfile
    process = None
    temp_file_path = None
    
    try:
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as temp_file:
            temp_file.write(code)
            temp_file_path = temp_file.name

        start_time = time.time()
        peak_memory = 0.0

        # Start the subprocess
        process = subprocess.Popen(
            ['python', temp_file_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        # Create a psutil Process object
        try:
            ps_process = psutil.Process(process.pid)
            
            # Monitor memory usage
            while process.poll() is None:
                try:
                    mem = ps_process.memory_info().rss / (1024 * 1024)  # Convert bytes to MB
                    peak_memory = max(peak_memory, mem)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    break
                time.sleep(0.1)

            # Get process output
            stdout, stderr = process.communicate()
            execution_time = time.time() - start_time
            
            if process.returncode == 0:
                output = stdout
            else:
                output = f"Error:\n{stderr}"

        except psutil.NoSuchProcess:
            output = "Process terminated unexpectedly"
            execution_time = time.time() - start_time

    except Exception as e:
        output = f"Exception occurred while running the code: {str(e)}"
        execution_time = 0.0
        peak_memory = 0.0

    finally:
        # Cleanup
        if process and process.poll() is None:
            try:
                process.kill()
            except:
                pass
                
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.remove(temp_file_path)
            except:
                pass

    return output, execution_time, peak_memory
    
def run_code(code: str) -> Tuple[str, float, float]:
    """Run code by writing it to a temporary file and executing it using subprocess, tracking memory usage."""
    import tempfile
    process = None
    temp_file_path = None
    
    try:
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as temp_file:
            temp_file.write(code)
            temp_file_path = temp_file.name

        start_time = time.time()
        peak_memory = 0.0

        # Start the subprocess
        process = subprocess.Popen(
            ['python', temp_file_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        # Create a psutil Process object
        try:
            ps_process = psutil.Process(process.pid)
            
            # Monitor memory usage
            while process.poll() is None:
                try:
                    mem = ps_process.memory_info().rss / (1024 * 1024)  # Convert bytes to MB
                    peak_memory = max(peak_memory, mem)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    break
                time.sleep(0.1)

            # Get process output
            stdout, stderr = process.communicate()
            execution_time = time.time() - start_time
            
            if process.returncode == 0:
                output = stdout
            else:
                output = f"Error:\n{stderr}"

        except psutil.NoSuchProcess:
            output = "Process terminated unexpectedly"
            execution_time = time.time() - start_time

    except Exception as e:
        output = f"Exception occurred while running the code: {str(e)}"
        execution_time = 0.0
        peak_memory = 0.0

    finally:
        # Cleanup
        if process and process.poll() is None:
            try:
                process.kill()
            except:
                pass
                
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.remove(temp_file_path)
            except:
                pass

    return output, execution_time, peak_memory


def prepare_performance_data(execution_times: List[float], memory_usages: List[float], techniques_applied: List[str]) -> Dict:
    return {
        'Technique Applied': techniques_applied,
        'Execution Time (seconds)': execution_times,
        'Memory Usage (MB)': memory_usages
    }
